{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DIR_UP","DIR_DOWN","DIR_LEFT","DIR_RIGHT","MoveFunctionMap","37","InVal","OutVal","x","39","38","y","40","INIT_SNAKE_LEN","GridCell","props","CellStyle","snakeMaps","gridx","gridy","fruitMaps","react_default","a","createElement","className","style","height","size","width","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","PosHash","pos","ResetSnake","SnakeMaps","SnakeArray","MoveDirection","Score","i","NumCells","push","InitSnake","makeNewFruit","KeyDowned","KeyEvent","Math","abs","keyCode","max","floor","random","FruitMaps","FruitArray","updateSnake","length","posnew","console","log","setState","state","posd","shift","render","Cells","CellIndexes","map","CellSize","onKeyDown","ref","el","tabIndex","StartGame","Array","from","keys","moveSnakeInterval","setInterval","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be0802fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nconst DIR_UP = 38;\r\nconst DIR_DOWN = 40;\r\nconst DIR_LEFT = 37;\r\nconst DIR_RIGHT = 39;\r\n\r\nconst MoveFunctionMap = {\r\n  37: (InVal,OutVal) => {OutVal.x=InVal.x-1;},\r\n  39: (InVal,OutVal) => {OutVal.x=InVal.x+1;},\r\n  38: (InVal,OutVal) => {OutVal.y=InVal.y-1;},\r\n  40: (InVal,OutVal) => {OutVal.y=InVal.y+1;}\r\n}\r\n\r\nconst INIT_SNAKE_LEN = 5;\r\n\r\n// display a single cell\r\nfunction GridCell(props) {\r\n\r\n  let CellStyle = `grid-cell`;\r\n\r\n  if( props.snakeMaps[ props.gridx + \",\" + props.gridy]) \r\n  {\r\n    CellStyle = `grid-snake`;\r\n  }\r\n\r\n  if( props.fruitMaps[ props.gridx + \",\" + props.gridy]) \r\n  {\r\n    CellStyle = `grid-fruit`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={CellStyle}\r\n      style={{ height: props.size + \"px\", width: props.size + \"px\" }}\r\n    />\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor (props) {\r\n    super(props);\r\n    this.SnakeArray = []; \r\n    this.SnakeMaps = {}; \r\n    this.FruitArray = []; \r\n    this.FruitMaps = {}; \r\n    this.MoveDirection = DIR_DOWN;\r\n    this.NumCells = Math.floor(this.props.size / 30);\r\n    this.Score = 0;\r\n\r\n    this.InitSnake();\r\n    this.StartGame();\r\n    this.state = { };\r\n\r\n    this.CellSize = this.props.size / this.NumCells;\r\n    this.CellIndexes = Array.from(Array(this.NumCells).keys());\r\n  }\r\n\r\n  PosHash = (pos) => {\r\n    return pos.x + \",\" + pos.y;\r\n  }\r\n\r\n  ResetSnake = () => {\r\n    this.SnakeMaps = {};\r\n    this.SnakeArray = [];\r\n    this.MoveDirection = DIR_DOWN;\r\n    this.Score = 0;\r\n    for( let i = 0; i<=INIT_SNAKE_LEN; ++i )\r\n    {\r\n      let pos = {};\r\n      pos.x = this.NumCells/2;\r\n      pos.y = this.NumCells/2 + i;\r\n      this.SnakeMaps[this.PosHash(pos)] = 1;\r\n      this.SnakeArray.push(pos);\r\n    }\r\n  }\r\n\r\n  InitSnake = () => {\r\n    this.ResetSnake();\r\n    this.makeNewFruit(10);\r\n  }\r\n\r\n  KeyDowned = (KeyEvent) => {\r\n    // This is to avoid going into right opposite direction \r\n    // the snake is going.\r\n    if( Math.abs(this.MoveDirection - KeyEvent.keyCode) === 2) {\r\n      return;\r\n    }\r\n\r\n    if ( KeyEvent.keyCode === DIR_RIGHT || KeyEvent.keyCode === DIR_LEFT || KeyEvent.keyCode === DIR_UP || KeyEvent.keyCode === DIR_DOWN) {\r\n      this.MoveDirection = KeyEvent.keyCode;\r\n    }\r\n  }\r\n\r\n  makeNewFruit = (x) => {\r\n    let min=0; \r\n    let max=x-1;  \r\n    let pos = {};\r\n    pos.x = Math.floor(Math.random() * (max - min)) + min; \r\n    pos.y = Math.floor(Math.random() * (max - min)) + min; \r\n    this.FruitMaps[this.PosHash(pos)] = 1;\r\n    this.FruitArray.push(pos);\r\n  }\r\n\r\n  updateSnake = () => {\r\n\r\n    let pos = this.SnakeArray[this.SnakeArray.length-1];\r\n    let posnew = {};\r\n    posnew.x = pos.x;\r\n    posnew.y = pos.y;\r\n\r\n    MoveFunctionMap[this.MoveDirection](pos,posnew);\r\n\r\n    // snake collide with walls\r\n    // posnew.x = Math.min(Math.max(0,posnew.x),this.NumCells);\r\n    // posnew.y = Math.min(Math.max(0,posnew.y),this.NumCells);\r\n\r\n    // snake pass through walls\r\n    if (posnew.x < 0) {\r\n      posnew.x=this.NumCells;\r\n    } else if (posnew.x > this.NumCells-1) {\r\n      posnew.x = 0;\r\n    } \r\n    if (posnew.y < 0) {\r\n      posnew.y=this.NumCells;\r\n    } else if (posnew.y > this.NumCells-1) {\r\n      posnew.y=0;\r\n    } \r\n\r\n    if(this.SnakeMaps[this.PosHash(posnew)]) {\r\n      console.log(\"Game Over!!!\");\r\n      this.ResetSnake();\r\n      this.setState({ state: this.state });\r\n      return;\r\n    }\r\n\r\n    if(this.FruitMaps[this.PosHash(posnew)]) {\r\n      let posd = this.FruitArray.shift();\r\n      delete this.FruitMaps[this.PosHash(posd)];\r\n      this.makeNewFruit(this.NumCells);\r\n      this.SnakeArray.push(posnew);\r\n      this.Score+=10;\r\n    }\r\n\r\n    this.SnakeArray.push(posnew);\r\n    this.SnakeMaps[this.PosHash(posnew)] = 1;\r\n\r\n    let posd = this.SnakeArray.shift();\r\n    delete this.SnakeMaps[this.PosHash(posd)];\r\n\r\n    this.setState({ state: this.state });\r\n  }\r\n\r\n  StartGame() {\r\n    this.moveSnakeInterval = setInterval(this.updateSnake, 100);\r\n  }\r\n\r\n  render = () => {\r\n    // This has to be optimized\r\n    const Cells = this.CellIndexes.map(y => {\r\n      return this.CellIndexes.map(x => {\r\n        return (\r\n          <GridCell size={this.CellSize} gridx={x} gridy={y} snakeMaps={this.SnakeMaps} fruitMaps={this.FruitMaps}/>\r\n        );\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className=\"snake-board\"\r\n        onKeyDown={this.KeyDowned}\r\n        style={{\r\n          width: this.props.size + \"px\",\r\n          height: this.props.size + 10 + \"px\"\r\n        }}\r\n        ref={el => (this.el = el)}\r\n        tabIndex={-1}\r\n        >\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            width: this.props.size + \"px\",\r\n            height: this.props.size + \"px\"\r\n          }}\r\n          >\r\n          {Cells}\r\n        </div>\r\n        <div>Score: {this.Score}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App size={660}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}