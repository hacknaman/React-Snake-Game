{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["snakeArray","snakeMaps","fruitArray","fruitMaps","moveDirection","numCells","DIR_UP","DIR_DOWN","DIR_LEFT","DIR_RIGHT","functionMap","37","value","value2","x","39","38","y","40","GridCell","props","cellStyle","gridx","gridy","react_default","a","createElement","className","style","height","size","width","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","KeyDownn","KeyEvent","Math","abs","keyCode","makeNewFruit","max","pos","floor","random","posHash","push","updateSnake","length","posnew","console","log","ResetSnake","setState","state","posd","shift","render","cellSize","cellIndexes","Array","from","keys","cells","map","onKeyDown","ref","el","tabIndex","InitSnake","StartGame","i","moveSnakeInterval","setInterval","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGIA,SAAa,IACbC,EAAY,GACZC,EAAa,GACbC,EAAY,GAEZC,EAAgB,GAChBC,EAAW,GAITC,EAAS,GACTC,EAAW,GACXC,EAAW,GACXC,EAAY,GAEZC,EAAc,CAClBC,GAAI,SAACC,EAAMC,GAAYA,EAAOC,EAAEF,EAAME,EAAE,GACxCC,GAAI,SAACH,EAAMC,GAAYA,EAAOC,EAAEF,EAAME,EAAE,GACxCE,GAAI,SAACJ,EAAMC,GAAYA,EAAOI,EAAEL,EAAMK,EAAE,GACxCC,GAAI,SAACN,EAAMC,GAAYA,EAAOI,EAAEL,EAAMK,EAAE,IAI1C,SAASE,EAASC,GAEhB,IAAIC,EAAS,YAYb,OAVIpB,EAAWmB,EAAME,MAAQ,IAAMF,EAAMG,SAEvCF,EAAS,cAGPlB,EAAWiB,EAAME,MAAQ,IAAMF,EAAMG,SAEvCF,EAAS,cAITG,EAAAC,EAAAC,cAAA,OACEC,UAAWN,EACXO,MAAO,CAAEC,OAAQT,EAAMU,KAAO,KAAMC,MAAOX,EAAMU,KAAO,YA0J/CE,cAnJb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KA+BRoB,SAAW,SAACC,GAIyC,IAA/CC,KAAKC,IAAIvC,EAAgBqC,EAASG,WAIjCH,EAASG,UAAYnC,GAAagC,EAASG,UAAYpC,GAAYiC,EAASG,UAAYtC,GAAUmC,EAASG,UAAYrC,IAC1HH,EAAgBqC,EAASG,WAzCVX,EA6CnBY,aAAe,SAAC/B,GACd,IACIgC,EAAIhC,EAAE,EACNiC,EAAM,GACVA,EAAIjC,EAAI4B,KAAKM,MAAMN,KAAKO,UAAYH,EAH5B,MAIRC,EAAI9B,EAAIyB,KAAKM,MAAMN,KAAKO,UAAYH,EAJ5B,MAKR3C,EAAU8B,EAAKiB,QAAQH,IAAQ,EAC/B7C,EAAWiD,KAAKJ,IApDCd,EAuDnBmB,YAAc,WAEZ,IAAIL,EAAM/C,EAAWA,EAAWqD,OAAO,GACnCC,EAAS,GAsBb,GArBAA,EAAOxC,EAAIiC,EAAIjC,EACfwC,EAAOrC,EAAI8B,EAAI9B,EAEfP,EAAYN,GAAe2C,EAAIO,GAO3BA,EAAOxC,EAAI,EACbwC,EAAOxC,EAAET,EACAiD,EAAOxC,EAAIT,EAAS,IAC7BiD,EAAOxC,EAAI,GAETwC,EAAOrC,EAAI,EACbqC,EAAOrC,EAAEZ,EACAiD,EAAOrC,EAAIZ,EAAS,IAC7BiD,EAAOrC,EAAE,GAGPhB,EAAUgC,EAAKiB,QAAQI,IAIzB,OAHAC,QAAQC,IAAI,gBACZvB,EAAKwB,kBACLxB,EAAKyB,SAAS,CAAEC,MAAO1B,EAAK0B,QAI9B,GAAGxD,EAAU8B,EAAKiB,QAAQI,IAAU,CAClC,IAAIM,EAAO1D,EAAW2D,eACf1D,EAAU8B,EAAKiB,QAAQU,IAC9B3B,EAAKY,aAAaxC,GAClBL,EAAWmD,KAAKG,GAGlBtD,EAAWmD,KAAKG,GAChBrD,EAAUgC,EAAKiB,QAAQI,IAAW,EAElC,IAAIM,EAAO5D,EAAW6D,eACf5D,EAAUgC,EAAKiB,QAAQU,IAE9B3B,EAAKyB,SAAS,CAAEC,MAAO1B,EAAK0B,SApGX1B,EA2GnB6B,OAAS,WAEP7B,EAAK5B,SAAWqC,KAAKM,MAAMf,EAAKb,MAAMU,KAAO,IAC7CzB,EAAW4B,EAAK5B,SAChB,IAAM0D,EAAW9B,EAAKb,MAAMU,KAAOG,EAAK5B,SAClC2D,EAAcC,MAAMC,KAAKD,MAAMhC,EAAK5B,UAAU8D,QAE9CC,EAAQJ,EAAYK,IAAI,SAAApD,GAC5B,OAAO+C,EAAYK,IAAI,SAAAvD,GACrB,OACEU,EAAAC,EAAAC,cAACP,EAAD,CAAUW,KAAMiC,EAAUzC,MAAOR,EAAGS,MAAON,QAKjD,OACEO,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACV2C,UAAWrC,EAAKO,SAChBZ,MAAO,CACLG,MAAOE,EAAKb,MAAMU,KAAO,KACzBD,OAAQI,EAAKb,MAAMU,KAAO,MAE5ByC,IAAK,SAAAC,GAAE,OAAKvC,EAAKuC,GAAKA,GACtBC,UAAW,GAEXjD,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVC,MAAO,CACLG,MAAOE,EAAKb,MAAMU,KAAO,KACzBD,OAAQI,EAAKb,MAAMU,KAAO,OAG3BsC,KA1IPnC,EAAKyC,YACLzC,EAAK0C,YACL1C,EAAK0B,MAAQ,GAJI1B,uEAOXc,GACN,OAAOA,EAAIjC,EAAI,IAAMiC,EAAI9B,uCAIzBhB,EAAY,GACZD,EAAa,GAEbI,EAAgBG,EAChB,IAAK,IAAIqE,EAAI,EAAGA,GAFE,IAEgBA,EAClC,CACE,IAAI7B,EAAM,CACVA,EAAQ,IACRA,EAAI9B,EAAI,GAAK2D,EACb3E,EAAUmC,KAAKc,QAAQH,IAAQ,EAC/B/C,EAAWmD,KAAKJ,wCAMlBX,KAAKqB,aACLrB,KAAKS,aAAa,wCA2ElBT,KAAKyC,kBAAoBC,YAAY1C,KAAKgB,YAAa,YA1GzC2B,aCpCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAOtC,EAAAC,EAAAC,cAAC4D,EAAD,CAAKxD,KAAM,MAAQyD,SAASC,eAAe,SD2HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8fe4c29e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nvar snakeArray = []; \r\nvar snakeMaps = {}; \r\nvar fruitArray = []; \r\nvar fruitMaps = {}; \r\n\r\nvar moveDirection = 40;\r\nvar numCells = 30;\r\n\r\n\r\n// 37 left, 38 up, 39 right, 40 down\r\nconst DIR_UP = 38;\r\nconst DIR_DOWN = 40;\r\nconst DIR_LEFT = 37;\r\nconst DIR_RIGHT = 39;\r\n\r\nconst functionMap = {\r\n  37: (value,value2) => {value2.x=value.x-1;},\r\n  39: (value,value2) => {value2.x=value.x+1;},\r\n  38: (value,value2) => {value2.y=value.y-1;},\r\n  40: (value,value2) => {value2.y=value.y+1;}\r\n}\r\n\r\n// display a single cell\r\nfunction GridCell(props) {\r\n\r\n  let cellStyle = `grid-cell`;\r\n\r\n  if( snakeMaps[ props.gridx + \",\" + props.gridy]) \r\n  {\r\n    cellStyle = `grid-snake`;\r\n  }\r\n\r\n  if( fruitMaps[ props.gridx + \",\" + props.gridy]) \r\n  {\r\n    cellStyle = `grid-fruit`;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cellStyle}\r\n      style={{ height: props.size + \"px\", width: props.size + \"px\" }}\r\n      />\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.InitSnake();\r\n    this.StartGame();\r\n    this.state = { };\r\n  }\r\n\r\n  posHash(pos) {\r\n    return pos.x + \",\" + pos.y\r\n  }\r\n\r\n  ResetSnake() {\r\n    snakeMaps = {};\r\n    snakeArray = [];\r\n    let SnakeLength = 5;\r\n    moveDirection = DIR_DOWN;\r\n    for( let i = 0; i<=SnakeLength; ++i )\r\n    {\r\n      let pos = {};\r\n      pos.x = 10;\r\n      pos.y = 20 + i;\r\n      snakeMaps[this.posHash(pos)] = 1;\r\n      snakeArray.push(pos);\r\n    }\r\n\r\n  }\r\n\r\n  InitSnake() {\r\n    this.ResetSnake();\r\n    this.makeNewFruit(10);\r\n  }\r\n\r\n  KeyDownn = (KeyEvent) => {\r\n    // 37 left, 38 up, 39 right, 40 down\r\n    // This is to avoid going into right opposite direction \r\n    // the snake is going.\r\n    if( Math.abs(moveDirection - KeyEvent.keyCode) === 2) {\r\n      return;\r\n    }\r\n\r\n    if ( KeyEvent.keyCode === DIR_RIGHT || KeyEvent.keyCode === DIR_LEFT || KeyEvent.keyCode === DIR_UP || KeyEvent.keyCode === DIR_DOWN) {\r\n      moveDirection = KeyEvent.keyCode;\r\n    }\r\n  }\r\n\r\n  makeNewFruit = (x) => {\r\n    let min=0; \r\n    let max=x-1;  \r\n    let pos = {};\r\n    pos.x = Math.floor(Math.random() * (max - min)) + min; \r\n    pos.y = Math.floor(Math.random() * (max - min)) + min; \r\n    fruitMaps[this.posHash(pos)] = 1;\r\n    fruitArray.push(pos);\r\n  }\r\n\r\n  updateSnake = () => {\r\n\r\n    let pos = snakeArray[snakeArray.length-1];\r\n    let posnew = {};\r\n    posnew.x = pos.x;\r\n    posnew.y = pos.y;\r\n\r\n    functionMap[moveDirection](pos,posnew);\r\n\r\n    // snake collide with walls\r\n    // posnew.x = Math.min(Math.max(0,posnew.x),numCells);\r\n    // posnew.y = Math.min(Math.max(0,posnew.y),numCells);\r\n\r\n    // snake pass through walls\r\n    if (posnew.x < 0) {\r\n      posnew.x=numCells;\r\n    } else if (posnew.x > numCells-1) {\r\n      posnew.x = 0;\r\n    } \r\n    if (posnew.y < 0) {\r\n      posnew.y=numCells;\r\n    } else if (posnew.y > numCells-1) {\r\n      posnew.y=0;\r\n    } \r\n\r\n    if( snakeMaps[this.posHash(posnew)]) {\r\n      console.log(\"Game Over!!!\");\r\n      this.ResetSnake();\r\n      this.setState({ state: this.state });\r\n      return;\r\n    }\r\n\r\n    if(fruitMaps[this.posHash(posnew)]) {\r\n      let posd = fruitArray.shift();\r\n      delete fruitMaps[this.posHash(posd)];\r\n      this.makeNewFruit(numCells);\r\n      snakeArray.push(posnew);\r\n    }\r\n\r\n    snakeArray.push(posnew);\r\n    snakeMaps[this.posHash(posnew)] = 1;\r\n\r\n    let posd = snakeArray.shift();\r\n    delete snakeMaps[this.posHash(posd)];\r\n\r\n    this.setState({ state: this.state });\r\n  }\r\n\r\n  StartGame() {\r\n    this.moveSnakeInterval = setInterval(this.updateSnake, 100);\r\n  }\r\n\r\n  render = () => {\r\n\r\n    this.numCells = Math.floor(this.props.size / 15);\r\n    numCells = this.numCells;\r\n    const cellSize = this.props.size / this.numCells;\r\n    const cellIndexes = Array.from(Array(this.numCells).keys());\r\n\r\n    const cells = cellIndexes.map(y => {\r\n      return cellIndexes.map(x => {\r\n        return (\r\n          <GridCell size={cellSize} gridx={x} gridy={y} />\r\n        );\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className=\"snake-board\"\r\n        onKeyDown={this.KeyDownn}\r\n        style={{\r\n          width: this.props.size + \"px\",\r\n          height: this.props.size + \"px\"\r\n        }}\r\n        ref={el => (this.el = el)}\r\n        tabIndex={-1}\r\n        >\r\n        <div\r\n          className=\"grid\"\r\n          style={{\r\n            width: this.props.size + \"px\",\r\n            height: this.props.size + \"px\"\r\n          }}\r\n          >\r\n          {cells}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App size={660}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}